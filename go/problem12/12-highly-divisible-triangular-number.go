package euler

import (
	"fmt"
	"math"
)

/*
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Benchmark:

real  0m0.852s
user  0m0.776s
sys 0m0.084s

Answer: 76576500

*/
func main() {
	o := 0
	i := 1
	for o < 500 {
		i++
		o = numberOfDivisors(triangleNumber(i))
	}
	fmt.Printf("The first value of triangle number to have over five hundred divisor is %d\n", triangleNumber(i))
}

func triangleNumber(n int) int {
	return n * (n + 1) / 2
}

func numberOfDivisors(n int) int {
	var list []int
	r := int(math.Ceil(math.Sqrt(float64(n))))
	for i := 1; i < r; i++ {
		if n%i == 0 {
			list = append(list, i)
		}
	}
	return len(list) * 2
}
