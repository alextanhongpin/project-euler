"""
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Benchmark
('Time:', 4.871320009231567)
"""
import math

def triangle_number(number):
    """Get the triangle numbers"""
    return number * (number + 1) / 2

def find_divisors(number):
    """
    Get the number of divisors
    """
    output = set()
    limit = int(math.ceil(math.sqrt(number)))
    for i in range(1, limit):
        if number % i == 0:
            output.add(i)
    return len(output) * 2


def main():
    o = 0
    i = 1
    while o < 500:
        i += 1
        o = find_divisors(triangle_number(i))
    print("The first triangle number with over five hundred divisors is:", triangle_number(i))

if __name__ == '__main__':
    import timeit
    ITERATIONS = 10
    MESSAGE = "Function takes {} s to complete."
    print MESSAGE.format(timeit.timeit("main()", 
                                       number=ITERATIONS, 
                                       setup="from __main__ import main") / ITERATIONS)

